1. config.php

Дефиниране на адреса и порта на сървъра на базата данни, потребителско име, парола и база данни, съдържаща таблицата.
DBSERVER - адрес и порт
DBUSERNAME - потребителско име от което ще бъде достъпвана
DBPASSWORD - парола чрез която ще бъде достъпвана
DBNAME - име на базата данни, съдържаща таблицата/ите

db - обект, съдържащ връзката към базата данни

mysqli_connect - метод за отваряне на нова връзка към базата данни(еквивалентен на mysqli_contruct)

проверка дали връзката е успешна с if($db === false).
При неуспешна връзка, mysqli_connect връща false.

Ако се установи грешка, чрез метода die(еквивалент на exit), се посочва кода на грешката и се излиза от приложението.

2. session.php

session_start() стартира нова сесия.
След това се проверява дали потребителят е влязъл, и се препраща към welcome.php

3. login.php

Започва с проверка дали потребителят е подал POST заявка, като се проверява 1. Има ли REQUEST_METHOD == POST, и дали бутонът submit е натиснат(се намира в подадената заявка).

Запазват се данните от полетата email, password и div в който се намира captchа-та, като с функцията trim се отстраняват допълнителните празни места преди или след самите данни.
str_get_html е функция от библиотеката/файлът simple_html_dom.php
чрез html->find се открива вътрешният текст и се запазва в променливата text.

Следват проверки за празни данни от полетата email и password, допълнително към required модификатора в html кода.

Ако няма грешки, се пристъпва към проверка дали captcha съвпада с входа от потребителя, като се сравнява стойността на полето submit1 (id=cap, с placeholder Captcha code) и генерираният текст от div.

След което, ако съвпадат, се приготвя prepared statement SELECT заявка за търсене в таблицата users, което трябва да открие ред в който имейлът съвпада с въведеният в полето от потребителя.

Ако няма проблем с инициализирането на prepared statement, се пристъпва към подаването на стойността на променливата email, взета от полето за вход от потребителя, и заявката се изпълнява.

Взима се резултатът от заявката, и се проверява дали има поне един ред.
Ако има открит ред, се сравнява паролата въведена от потребителя, и тази която е запазена в базата данни за съответният потребител с даденият email.

Сесийната променлива userid се задава на userid от базата данни за съответния потребител, и същия бива препратен към страницата welcome.php.

Ако паролата не съвпада, се връща съобщение за грешка "Неправилна парола".

След излизане от предпоследният if, заявката и връзката към базата данни се затваря.


Код за генериране на captcha:
Създаване на глобална променлива captcha, и две функции.

Функцията generate, генерира 4 символен низ като се генерира случайно число(чрез функцията Math.random), представляващо позиция в низа с допустимите символи(randomchar), и съответния символ бива добавен към низът uniquecahr.
След което низът се задава като стойност на елемента с идентификатор image (captcha = document.getElementById("image"); и captcha.innerHTML = uniquechar;)

Функцията printmsg() беше използвана в началото за debug и тестване, иначе представлява проверка за съответствие между стойностите на зададения текст на запаметения елемент captcha, и въведеният текст от потребителя, взет от елемент с идентификатор "cap"
(<input type="text" name="submit1" id="cap" placeholder="Captcha code" />)


HTML код

<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.3/css/all.css" .....>
се използва за зареждане на css файл, включващ иконата fas fa-sync, използвана за бутона за генериране на нова captcha, в случай че автоматично заредената при зареждането на body, чрез <body onload="generate()">, е сложна за даденият потребител.

Страницата включва 3 текстови полета, 2 бутона, и 2 линка към страниците за регистриране и забравена парола.



4. register.php

PHP кодът е подобен на този от login.php
Проверява се за POST заявка с избран бутон submit, премахват се празните места преди и след данните, след което паролата се хешира за по-висока сигурност.

Приготвя се prepared statement за търсене на вече съществуваща регистрация с даденият от потребителя email.

Ако е открит ред, съдържащ въведеният от потребителя email, се извежда съобщение за грешка, гласящо "The email address is already registered!"

Ако не е, се продължава с проверка за дължина на въведената парола, дали повторно въведената парола съвпада, и дали няма грешки.

След което се приготвя prepared statement и се изпълнява INSERT заявка с проверените мейл и вече хеширана парола, и името на потребителя.

Заявката и връзката към базата данни се затваря.

Captcha кодът е същият като от предишният файл.


HTML код:
За някои текстови полета са въведени ограничения:

Името което потребителят иска да зададе на акаунта си, трябва да е с дължина минимум 3 символа, и не повече от 200 (случайно кръгло число, ограничението в базата данни е 255 символа).
<input type="text" name="name" minlength="3" maxlength="200" class="form-control" required>


Текстовото поле за email приема само email:
<input type="email"


Паролата трябва да е от 6 до 36 символа дълга, и може да съдържа само чифри, букви и празни места.
<input type="password" id="pass" name="password" minlength="6" pattern="[a-zA-Z0-9\s]+" maxlength="36" class="form-control" required>


Полетата за email, име и парола са задължителни.

Най-долу има линк за потребителите които установят че вече имат регистрация с имейла си, който да ги отведе до страницата за влизане:
<p>Already have an account? <a href="login.php">Login here</a>.</p>


5. Forgotten.php
Страница за забравена парола.

Дефинира се функция за генериране на нова парола с дължина 7 символа.
Логиката е подобна на функцията за генерирането на captcha - случайно число съотвестващо на позиция в масив от възможни символи, при което символът съответстващ на позицията, се добавя към масив от символи който ще състави бъдещата парола на потребителя.

След приемане на стойността от полето email, и проверка за грешки, проверка за правилно въведена captcha и успешна SELECT заявка към базата данни с която е намерен дадената регистрация на потребителя с този email, се приготвя UPDATE заявка с която да се промени паролата на потребителят със зададеният мейл, с автоматично генерираната от функцията randomPassword().
$newpass=(string)randomPassword();
(масивът който randomPassword предава като резултат се преобразува към символен низ)

$query2 = $db->prepare("UPDATE users SET password='?' WHERE email=?");
$stmt = $conn->prepare($query2);
$stmt->bind_param('ss', $newpass, $email);


Потребителят бива уведомен за промяна на паролата му, чрез изпращане на email посредством функцията mail, където се задава email адреса на потребителя като получател, темата е "Forgotten Password", съдържанието е новата парола ($newpass), а headers е зададено по-горе.
Ако имейлът и заявката за промяна в базата данни са успешни, потребителят се уведомява и бива подканен да си провери пощата.
Ако не, се извежда съобщение за грешка.

Полето за въвеждане на email е задължително в HTML кода.



6.Logout.php

session_start() продължава сесията започната с успешната регистрация и тя бива терминирана със session_destroy, при което потребителят е пренасочен към страницата login.php


7. welcome.php

Продължава сесията започната с успешна регистрация, но като цяло е placeholder.

Съдържа бутон за logout, който препраща към logout.php



8. База данни:
CREATE TABLE users(
   id INT AUTO_INCREMENT,
   name VARCHAR(200),
   email VARCHAR(255),
   password VARCHAR(60),
   PRIMARY KEY (id),
   CONSTRAINT reference_unique UNIQUE (email)
);





